from aiogram import types, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from questions import quiz_data
from database import save_result, get_result

router = Router()

# –•—Ä–∞–Ω–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_scores = {}
user_progress = {}

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –∫–≤–∏–∑-–±–æ—Ç.\n"
        "–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.\n"
        "–ù–∞–ø–∏—à–∏ /stats —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    )

@router.message(Command("quiz"))
async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    user_scores[user_id] = 0
    user_progress[user_id] = 0
    await send_question(message, user_id)

async def send_question(message, user_id):
    idx = user_progress[user_id]

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    if idx >= len(quiz_data):
        score = user_scores[user_id]
        save_result(user_id, score)
        await message.answer(
            f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(quiz_data)}"
        )
        return

    question = quiz_data[idx]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    buttons = [
        [InlineKeyboardButton(text=option, callback_data=option)]
        for option in question["options"]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(question["question"], reply_markup=kb)

@router.callback_query()
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    idx = user_progress[user_id]
    question = quiz_data[idx]
    answer = callback.data

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ Aiogram 3)
    await callback.answer()

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    await callback.message.edit_reply_markup(reply_markup=None)

    # –°–æ–æ–±—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {answer}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if answer == question["answer"]:
        user_scores[user_id] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_progress[user_id] += 1
    await send_question(callback.message, user_id)

@router.message(Command("stats"))
async def stats(message: types.Message):
    score = get_result(message.from_user.id)
    if score is None:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑.")
    else:
        await message.answer(f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(quiz_data)}")
